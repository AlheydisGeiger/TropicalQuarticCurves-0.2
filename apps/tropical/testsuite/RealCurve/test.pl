# Properties of RealQuarticCurve

#my $coefs = new Vector<Int>([5,1,2,2,0,0,4,0,1,16,7,9,12,16,33]);
#my $coefs2 = new Vector<Int>([10,4,6,0,1,4,2,0,0,4,5,1,2,4,9]);
my $coefs1 = new Vector<Int>([19,14,4,11,0,0,9,0,1,3,8,6,5,5,8]);
my $coefs2 = new Vector<Int>([8,4,2,1,0,1,2,0,0,2,14,9,5,2,5]);
my $coefs3 = new Vector<Int>([79,58,17,38,0,14,19,0,0,12,1,2,4,7,11]);
my $coefs4 = new Vector<Int>([18,11,5,5,0,4,4,0,1,4,5,2,0,4,9]);

my $C1 = new RealQuarticCurve<Min>(COEFFICIENTS=>$coefs1,SIGNS=>[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
my $C2 = new RealQuarticCurve<Min>(COEFFICIENTS=>$coefs2,SIGNS=>[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
my $C3 = new RealQuarticCurve<Min>(COEFFICIENTS=>$coefs3,SIGNS=>[1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1]);
my $C4 = new RealQuarticCurve<Min>(COEFFICIENTS=>$coefs4,SIGNS=>[1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1]);

#compare values with the values in the files
$C1->DUAL_SUBDIVISION->MAXIMAL_CELLS;
$C1->DUAL_SUBDIVISION->ALL_DEFORMATION_MOTIFS;
$C2->DUAL_SUBDIVISION->MAXIMAL_CELLS;
$C2->DUAL_SUBDIVISION->ALL_DEFORMATION_MOTIFS;
$C3->DUAL_SUBDIVISION->MAXIMAL_CELLS;
$C3->DUAL_SUBDIVISION->ALL_DEFORMATION_MOTIFS;
$C4->DUAL_SUBDIVISION->MAXIMAL_CELLS;
$C4->DUAL_SUBDIVISION->ALL_DEFORMATION_MOTIFS;
$C1->REAL_BITANGENTS;
$C2->REAL_BITANGENTS;
$C3->REAL_BITANGENTS;
$C4->REAL_BITANGENTS;
$C1->REAL_BITANGENT_TYPES;#GKUTT'
$C2->REAL_BITANGENT_TYPES;#B
$C3->REAL_BITANGENT_TYPES;#II
$C4->REAL_BITANGENT_TYPES;#EFJ G
$C1->REAL_BITANGENT_SHAPES; #T
$C2->REAL_BITANGENT_SHAPES; #B
$C3->REAL_BITANGENT_SHAPES; #II
$C4->REAL_BITANGENT_SHAPES; #E G
$C1->N_REAL_BITANGENTS; #1
$C2->N_REAL_BITANGENTS; #1
$C3->N_REAL_BITANGENTS; #1
$C4->N_REAL_BITANGENTS; #2
$C1->TWISTED_EDGES; #(1,2),(1,4),(2,4),(4,10),(5,7),(7,13),(9,13),(8,9),(7,8)
$C2->TWISTED_EDGES;#(2,3),(4,5),(4,8),(4,7),(3,7),(5,8),(6,7),(6,13),(8,9),(9,13)
$C3->TWISTED_EDGES; #(2,10),(7,10),(4,14),(4,8),(4,7),(7,8),(8,11),(8,12),(8,13)
$C4->TWISTED_EDGES; #(4,6),(4,7),(4,8),(4,9),(6,7),(7,10),(8,12),(8,9) #negative are 4,7,8,11 
$C1->IS_DIVIDING; #false
$C2->IS_DIVIDING; #false
$C3->IS_DIVIDING; #false
$C4->IS_DIVIDING; #false
$C1->N_OVALS; #1
$C2->N_OVALS; #1
$C3->N_OVALS; #1
$C4->N_OVALS; #2 not nested
$C1->PATCHWORK;
$C2->PATCHWORK;
$C3->PATCHWORK;
$C4->PATCHWORK;
#Test the following by hand! Does this test make sense?
compare_object("Curve1", $C1,ignore=>["QUARTIC_CURVE.DUAL_SUBDIVISION.POLYHEDRAL_COMPLEX.MAXIMAL_POLYTOPES_INCIDENCES"]);
compare_object("Curve2", $C2,ignore=>["QUARTIC_CURVE.DUAL_SUBDIVISION.POLYHEDRAL_COMPLEX.MAXIMAL_POLYTOPES_INCIDENCES"]);
compare_object("Curve3", $C3,ignore=>["QUARTIC_CURVE.DUAL_SUBDIVISION.POLYHEDRAL_COMPLEX.MAXIMAL_POLYTOPES_INCIDENCES"]);
compare_object("Curve4", $C4,ignore=>["QUARTIC_CURVE.DUAL_SUBDIVISION.POLYHEDRAL_COMPLEX.MAXIMAL_POLYTOPES_INCIDENCES"]);


